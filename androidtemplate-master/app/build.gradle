apply plugin: 'com.android.application'

ext.vMajor = 1
ext.vMinor = 5
ext.vBugfix = 0

if (project.hasProperty("shredder.signing")
        && new File(project.property("shredder.signing") + ".gradle").exists()) {
    apply from: project.property("shredder.signing") + ".gradle";
}

android {
    compileSdkVersion 23
    buildToolsVersion '25.0.0'

    signingConfigs {
        debug {
            storeFile file("shredder-debug.keystore")
            keyAlias 'followmedebug'
            keyPassword 'password'
            storePassword 'password'
        }
    }

    defaultConfig {
        applicationId "com.shredder.shellproject"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode getBuildNumber()
        versionName computeVersionName()
    }

    buildTypes {
        debug {
            debuggable true
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
            versionNameSuffix '-debug'
        }
        alpha {
            debuggable true
            signingConfig signingConfigs.debug
            applicationIdSuffix ".alpha"
            versionNameSuffix '-alpha'
        }
        beta {
            debuggable true
            signingConfig signingConfigs.debug
            applicationIdSuffix ".beta"
            versionNameSuffix '-beta'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.3.0'
    compile 'com.android.support:design:23.3.0'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'net.hockeyapp.android:HockeySDK:4.0.1'
}

def getBuildNumber() {
    if (!System.getenv('CI_BUILD')) {
        return 9999
    }
    def cmd = 'git rev-list HEAD --no-merges --count'
    cmd.execute().text.trim().toInteger()
}

def writeVersionTagFile(String versionNameString) {
    println sprintf("Writing versionName to versionTag file: versionName=%s", versionNameString)
    def versionNameFile = file('versionTag')
    if (!versionNameFile.exists()) {
        versionNameFile.createNewFile()
    }
    versionNameFile.setText(versionNameString)
}

def computeVersionName() {
    def fullVersionString = String.format('%d.%d.%d.%d', vMajor, vMinor, vBugfix, getBuildNumber())
    writeVersionTagFile(fullVersionString)
    println "Full versionName is " + fullVersionString
    return fullVersionString
}